视频44 Spring容器创建-BeanFactory预准备
Spring容器的refresh()【创建刷新】;
org.springframework.context.support.AbstractApplicationContext.
refresh()
synchronized (this.startupShutdownMonitor) 包裹refresh内的流程,保证线程安全
1、prepareRefresh()刷新前的预处理;
    org.springframework.context.annotation.AnnotationConfigApplicationContext.
    prepareRefresh()
    org.springframework.context.support.AbstractApplicationContext.
    prepareRefresh()
	1）、initPropertySources()初始化一些属性设置;子类自定义个性化的属性设置方法；
	2）、getEnvironment().validateRequiredProperties();检验属性的合法等
	3）、earlyApplicationEvents= new LinkedHashSet<ApplicationEvent>();保存容器中的一些早期的事件；
2、obtainFreshBeanFactory();获取新鲜的BeanFactory；
    org.springframework.context.support.AbstractApplicationContext.
    obtainFreshBeanFactory()
	1）、refreshBeanFactory();刷新【创建】BeanFactory；
	        org.springframework.context.support.GenericApplicationContext.
	        GenericApplicationContext()
			无参构造器创建了一个this.beanFactory = new DefaultListableBeanFactory();
			设置id；
	2）、getBeanFactory();返回刚才GenericApplicationContext创建的BeanFactory对象；
	3）、将创建的BeanFactory【DefaultListableBeanFactory】返回；
3、prepareBeanFactory(beanFactory);BeanFactory的预准备工作（BeanFactory进行一些设置）；
    org.springframework.context.support.AbstractApplicationContext.
    prepareBeanFactory()
	1）、设置BeanFactory的类加载器、支持表达式解析器...
	        setBeanClassLoader(getClassLoader()), setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()))
	2）、添加部分BeanPostProcessor【ApplicationContextAwareProcessor】,用于后面bean初始化之后判断是否实现了ApplicationContextAware接口
	3）、设置忽略的自动装配的接口:
	        ignoreDependencyInterface()
	        EnvironmentAware、EmbeddedValueResolverAware、xxx；
	4）、注册可以解析的自动装配；我们能直接在任何组件中自动注入(@Autowired)：
	        registerResolvableDependency()
			BeanFactory、ResourceLoader、ApplicationEventPublisher、ApplicationContext
	5）、添加BeanPostProcessor【ApplicationListenerDetector】
	6）、添加编译时的AspectJ；
	        beanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory))
	7）、给BeanFactory中注册一些能用的组件,我们能直接在任何组件中自动注入(@Autowired)；
		environment【ConfigurableEnvironment】、
		beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());

		systemProperties【Map<String, Object>】、systemProperties里面包含一些与运行时参数,os.name,jdk版本等等的系统参数
		beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());

		systemEnvironment【Map<String, Object>】,systemEnvironment主要包含环境的参数,目录之类
		beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());
4、postProcessBeanFactory(beanFactory);BeanFactory准备工作完成后进行的后置处理工作；
	1）、子类通过重写这个方法来在BeanFactory创建并预准备完成以后做进一步的设置
======================以上是BeanFactory的创建及预准备工作==================================

视频45 Spring容器创建-执行BeanFactoryPostProcessor;
    注册BeanFactoryPostProcessor（Bean工厂的后置处理器）,没有创建!
    BeanDefinitionRegistryPostProcessor（Bean定义的后置处理器）,没有创建!
5、invokeBeanFactoryPostProcessors(beanFactory);执行BeanFactoryPostProcessor的方法；
    org.springframework.context.support.AbstractApplicationContext.
    invokeBeanFactoryPostProcessors()
	BeanFactoryPostProcessor：BeanFactory的后置处理器。在BeanFactory标准初始化之后执行的；
	两个接口：BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor
	1）、执行BeanFactoryPostProcessor的方法；
	        org.springframework.context.support.PostProcessorRegistrationDelegate.
	        invokeBeanFactoryPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory, java.util.List<org.springframework.beans.factory.config.BeanFactoryPostProcessor>)
		先执行BeanDefinitionRegistryPostProcessor
		1）、获取所有的BeanDefinitionRegistryPostProcessor；
		    String[] postProcessorNames =
            					beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);
		2）、看先执行实现了PriorityOrdered优先级接口的BeanDefinitionRegistryPostProcessor、
		    invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);
			postProcessor.postProcessBeanDefinitionRegistry(registry)
		3）、在执行实现了Ordered顺序接口的BeanDefinitionRegistryPostProcessor；
		    invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);
			postProcessor.postProcessBeanDefinitionRegistry(registry)
		4）、最后执行没有实现任何优先级或者是顺序接口的BeanDefinitionRegistryPostProcessors；
		    invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);
			postProcessor.postProcessBeanDefinitionRegistry(registry)
	    5    最后执行BeanDefinitionRegistryPostProcessors父接口BeanFactoryPostProcessor的方法,
	            这里执行的是BeanDefinitionRegistryPostProcessors的实现类里面的postProcessBeanFactory()
	        invokeBeanFactoryPostProcessors(registryProcessors, beanFactory);
	        postProcessor.postProcessBeanFactory(beanFactory);


		再执行BeanFactoryPostProcessor的方法
		1）、获取所有的BeanFactoryPostProcessor
		    String[] postProcessorNames =
            				beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class, true, false);
		2）、看先执行实现了PriorityOrdered优先级接口的BeanFactoryPostProcessor、
            invokeBeanFactoryPostProcessors(priorityOrderedPostProcessors, beanFactory);
            postProcessor.postProcessBeanFactory(registry)
        3）、在执行实现了Ordered顺序接口的BeanFactoryPostProcessor；
            invokeBeanFactoryPostProcessors(orderedPostProcessors, beanFactory);
            postProcessor.postProcessBeanFactory(registry)
        4）、最后执行没有实现任何优先级或者是顺序接口的BeanFactoryPostProcessor；
            invokeBeanFactoryPostProcessors(nonOrderedPostProcessors, beanFactory);
            postProcessor.postProcessBeanFactory(registry)

视频46 Spring容器创建-注册BeanPostProcessors(没有创建!)
6、registerBeanPostProcessors(beanFactory);注册BeanPostProcessor（Bean的后置处理器）【 intercept bean creation】
        org.springframework.context.support.AbstractApplicationContext.
        registerBeanPostProcessors
        org.springframework.context.support.PostProcessorRegistrationDelegate.
        registerBeanPostProcessors(org.springframework.beans.factory.config.ConfigurableListableBeanFactory, org.springframework.context.support.AbstractApplicationContext)
		不同接口类型的BeanPostProcessor；在Bean创建前后的执行时机是不一样的
		BeanPostProcessor、
		DestructionAwareBeanPostProcessor、
		InstantiationAwareBeanPostProcessor、
		SmartInstantiationAwareBeanPostProcessor、
		MergedBeanDefinitionPostProcessor【internalPostProcessors】、

		1）、获取所有的 BeanPostProcessor;
		    分别放入四个集合中:
		    List<BeanPostProcessor> priorityOrderedPostProcessors = new ArrayList<BeanPostProcessor>();
            List<BeanPostProcessor> internalPostProcessors = new ArrayList<BeanPostProcessor>();
            List<String> orderedPostProcessorNames = new ArrayList<String>();
            List<String> nonOrderedPostProcessorNames = new ArrayList<String>();
            后置处理器都默认可以通过PriorityOrdered、Ordered接口来执行优先级
		2）、先排序并注册PriorityOrdered优先级接口的BeanPostProcessor；
			把每一个BeanPostProcessor；添加到BeanFactory中
			sortPostProcessors(priorityOrderedPostProcessors, beanFactory);
			beanFactory.addBeanPostProcessor(postProcessor);
		3）、再排序并注册Ordered接口的
		4）、最后排序并注册没有实现任何优先级接口的
		5）、最终排序并注册MergedBeanDefinitionPostProcessor；
		    sortPostProcessors(internalPostProcessors, beanFactory);
            registerBeanPostProcessors(beanFactory, internalPostProcessors);
		6）、最最终注册一个ApplicationListenerDetector；
		    beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(applicationContext));
		    来在Bean创建完成后检查是否是ApplicationListener，如果是就将bean作为监听器加入到容器中,<?>指的是监听什么事件
			applicationContext.addApplicationListener((ApplicationListener<?>) bean);

视频47 Spring容器创建-初始化MessageSource
7、initMessageSource();初始化MessageSource组件（做国际化功能；消息绑定，消息解析）；
    org.springframework.context.support.AbstractApplicationContext.
    initMessageSource()
		1）、获取BeanFactory
		    ConfigurableListableBeanFactory beanFactory = getBeanFactory();
		2）、看容器中是否有id为messageSource的，类型是MessageSource的组件
			如果有赋值给messageSource，如果没有自己创建一个DelegatingMessageSource；
				MessageSource：取出国际化配置文件中的某个key的值；能按照区域信息获取；
		3）、把创建好的MessageSource注册在容器中，以后获取国际化配置文件的值的时候，
		    可以自动注入(@Autowired)messageSource；调用getMessage方法,获取国际化信息
			beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource);
			MessageSource.getMessage(String code, Object[] args, String defaultMessage, Locale locale);

视频48 Spring容器创建-初始化事件派发器、监听器等
8、initApplicationEventMulticaster();初始化事件派发器；
		1）、获取BeanFactory
		2）、从BeanFactory中获取applicationEventMulticaster的applicationEventMulticaster；
		3）、如果上一步没有配置；创建一个SimpleApplicationEventMulticaster
		4）、将创建的ApplicationEventMulticaster添加到BeanFactory中，以后其他组件直接自动注入(@Autowired)
9、onRefresh();留给子容器（子类）
		1、子类重写这个方法，在容器刷新的时候可以自定义逻辑；
10、registerListeners();给容器中将所有项目里面的ApplicationListener注册进来；
		1、从容器中拿到所有的ApplicationListener
		    String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, true, false);
		2、将每个监听器添加到事件派发器中；
			getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);
		3、派发之前步骤产生的事件(如果有的话)；
		    getApplicationEventMulticaster().multicastEvent(earlyEvent);


=========================往下开始进行bean的创建实例和初始化=========================
视频49 Spring容器创建-创建Bean准备
视频50 Spring容器创建-Bean创建完成
11、finishBeanFactoryInitialization(beanFactory);初始化所有剩下的单实例bean；
    org.springframework.context.support.AbstractApplicationContext.
    finishBeanFactoryInitialization
    org.springframework.beans.factory.config.ConfigurableListableBeanFactory.
    preInstantiateSingletons
	1、beanFactory.preInstantiateSingletons();初始化后剩下的单实例bean
		1）、获取容器中的所有Bean，依次进行初始化和创建对象
		    List<String> beanNames = new ArrayList<String>(this.beanDefinitionNames);
		    for (String beanName : beanNames) ....
		2）、获取Bean的定义信息；RootBeanDefinition
		    RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);
		3）、Bean不是抽象的，是单实例的，不是懒加载；
		    if (!bd.isAbstract() && bd.isSingleton() && !bd.isLazyInit())
			1）、判断是否是FactoryBean；是否是实现FactoryBean接口的Bean；
			    if (isFactoryBean(beanName)) =>
			        return (beanInstance instanceof FactoryBean);
			        如果是,利用interface FactoryBean<T> => T getObject()  获取bean
			2）、不是工厂Bean。利用getBean(beanName);创建对象
				0、getBean(beanName)； ioc.getBean();测试类里面常用直接从IOC容器拿bean的方法
                    org.springframework.beans.factory.support.AbstractBeanFactory.
                    getBean(java.lang.String)
				1、doGetBean(name, null, null, false);
                    org.springframework.beans.factory.support.AbstractBeanFactory.
                    doGetBean
				2、先获取缓存中保存的单实例Bean。如果能获取到说明这个Bean之前被创建过（所有创建过的单实例Bean都会被缓存起来）
				    Object sharedInstance = getSingleton(beanName); =>
				    org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.
				    getSingleton(java.lang.String, boolean)
				    获取缓存bean的代码:
				    Object singletonObject = this.singletonObjects.get(beanName);
				    singletonObjects其实是:
					private final Map<String, Object> singletonObjects = new ConcurrentHashMap<String, Object>(256);
					缓存的单实例bean是从singletonObjects获取的
				3、缓存中获取不到，开始Bean的创建对象流程；
				    获取到是否有父类的beanFactory,如果有springMVC等,多个IOC容器的情况下,可能存在
				    BeanFactory parentBeanFactory = getParentBeanFactory();
				4、标记当前bean已经被创建,防止多线程情况下,同时创建bean,就不是多实例了
				    markBeanAsCreated(beanName);
				5、获取Bean的定义信息；
				    final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);
				6、【获取当前Bean依赖的其他Bean;如果有按照getBean()把依赖的Bean先创建出来；】,可以在bean定义中使用@DependsOn(value = {"",""})
				    String[] dependsOn = mbd.getDependsOn();
				    if (dependsOn != null) =>
				        registerDependentBean(dep, beanName);
                    	getBean(dep);
				7、启动单实例Bean的创建流程；
				    org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.
				    getSingleton(java.lang.String, org.springframework.beans.factory.ObjectFactory<?>)
				    org.springframework.beans.factory.ObjectFactory.
				    getObject
					1）、createBean(beanName, mbd, args);
					2）、让BeanPostProcessor先拦截返回代理对象；(还记得AOP么)
					    org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.
					    resolveBeforeInstantiation
					    Object bean = resolveBeforeInstantiation(beanName, mbdToUse);
						【InstantiationAwareBeanPostProcessor】：提前执行； => hasInstantiationAwareBeanPostProcessors()
						先触发：postProcessBeforeInstantiation()；
						如果有返回值：触发postProcessAfterInitialization()；
						    bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);
                            if (bean != null) {
                                bean = applyBeanPostProcessorsAfterInitialization(bean, beanName);
                            }
					3）、如果前面的InstantiationAwareBeanPostProcessor没有返回代理对象；调用4）
					4）、创建Bean doCreateBean(beanName, mbdToUse, args);
					     Object beanInstance = doCreateBean(beanName, mbdToUse, args);
					     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.
					     doCreateBean
						 1）、【创建Bean实例】；createBeanInstance(beanName, mbd, args);
						 	利用工厂方法或者对象的构造器创建出Bean实例；
						 	org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.
						 	createBeanInstance
						 	mbd.getFactoryMethodName() != null  获取到bean的工厂名称
						 	factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod; 这里就是定义在配置类的blue()方法
						 	最终,return factoryMethod.invoke(factoryBean, args);
						 2）、applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);
						    org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.
                            applyMergedBeanDefinitionPostProcessors

						    bp instanceof MergedBeanDefinitionPostProcessor =>
						 	调用【MergedBeanDefinitionPostProcessor】的
						 	postProcessMergedBeanDefinition(mbd, beanType, beanName);
						 3）、【Bean属性赋值】populateBean(beanName, mbd, instanceWrapper);
                                org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.
                                populateBean
						 	赋值之前：
						 	    hasInstantiationAwareBeanPostProcessors() => bp instanceof InstantiationAwareBeanPostProcessor =>
						 	1）、拿到InstantiationAwareBeanPostProcessor后置处理器；
						 		postProcessAfterInstantiation()；
						 	2）、拿到InstantiationAwareBeanPostProcessor后置处理器；
						 		postProcessPropertyValues()；
						 		org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor.
						 		postProcessPropertyValues
						 	=====赋值之前：=====
						 	3）、应用Bean属性的值；为属性利用setter方法等进行赋值；
						 		applyPropertyValues(beanName, mbd, bw, pvs);
						 		最终赋值的方法
						 		bw.setPropertyValues(new MutablePropertyValues(deepCopy));
						 4）、【Bean初始化】initializeBean(beanName, exposedObject, mbd);
						    org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.
						    initializeBean(java.lang.String, java.lang.Object, org.springframework.beans.factory.support.RootBeanDefinition)
						 	1）、【执行Aware接口方法】invokeAwareMethods(beanName, bean);执行xxxAware接口的方法,如果组件类实现了的话
						 		BeanNameAware\BeanClassLoaderAware\BeanFactoryAware
						 	2）、【执行后置处理器初始化之前】applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);
						 		BeanPostProcessor.postProcessBeforeInitialization（）;
						 		BeanPostProcessor是所有后置处理器的父接口
						 	3）、【执行初始化方法】invokeInitMethods(beanName, wrappedBean, mbd);
						 		1）、是否是InitializingBean接口的实现；执行接口规定的初始化；
						 		    bean instanceof InitializingBean
						 		2）、是否自定义初始化方法；
						 		    @Bean(initMethod="init",destroyMethod="detory")
						 	4）、【执行后置处理器初始化之后】applyBeanPostProcessorsAfterInitialization
						 		BeanPostProcessor.postProcessAfterInitialization()；
						 5）、注册Bean的销毁方法；
						        registerDisposableBeanIfNecessary(beanName, bean, mbd);
						        1）、是否是DisposableBean接口的实现；注册接口规定的销毁方法；
                                    bean instanceof DisposableBean
                                2）、是否自定义销毁方法；
                                    @Bean(initMethod="init",destroyMethod="detory")
                                    String destroyMethodName = beanDefinition.getDestroyMethodName();
                         =====至此,bean创建完成,doCreateBean完成,createBean完成
					5）、将创建的Bean添加到缓存中singletonObjects；
					    createBean(beanName, mbd, args);实际上是重写的,
					    getSingleton()内作为参数的匿名内部类的方法,
					    1）、因此,createBean完成后,进入getSingleton()方法,进行最终的处理
                            org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.
                            getSingleton(java.lang.String, org.springframework.beans.factory.ObjectFactory<?>)
                            1）、synchronized (this.singletonObjects),确保单实例对象创建,不会因为线程问题造成多实例创建
                            2）、beforeSingletonCreation(beanName); 检查容器是否已经有实例了,如果有会弹异常
                            3）、singletonObject = singletonFactory.getObject(); 从工厂中获取创建好的对象
                            4）、afterSingletonCreation(beanName); 检查如果类创建有异常,从容器中移除相关对象,并弹出异常
                            5）、addSingleton(beanName, singletonObject);
                                将创建的Bean添加到缓存中singletonObjects；还有从singletonFactories和earlySingletonObjects中移除
                                synchronized (this.singletonObjects) {
                                    this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT));
                                    this.singletonFactories.remove(beanName);
                                    this.earlySingletonObjects.remove(beanName);
                                    this.registeredSingletons.add(beanName);
                                }

				ioc容器就是这些Map；很多的Map里面保存了单实例Bean，环境信息。。。。；
		所有Bean都利用getBean创建完成以后；
		回到beanFactory.preInstantiateSingletons()方法内
			检查所有的Bean是否是SmartInitializingSingleton接口的；如果是；就执行afterSingletonsInstantiated()；
			与@EventListener的事件处理相关
			singletonInstance instanceof SmartInitializingSingleton

视频51 Spring容器创建-容器创建完成
12、finishRefresh();完成BeanFactory的初始化创建工作；IOC容器就创建完成；
    org.springframework.context.support.AbstractApplicationContext.
    finishRefresh
		1）、initLifecycleProcessor();初始化和生命周期有关的后置处理器；LifecycleProcessor
			默认从容器中找是否有lifecycleProcessor的组件【LifecycleProcessor】；如果没有new DefaultLifecycleProcessor();
			加入到容器；

			写一个LifecycleProcessor的实现类，可以在BeanFactory
				void onRefresh();
				void onClose();
		2）、	getLifecycleProcessor().onRefresh();
			拿到前面定义的生命周期处理器（BeanFactory）；回调onRefresh()；
		3）、publishEvent(new ContextRefreshedEvent(this));发布容器刷新完成事件；
		4）、liveBeansView.registerApplicationContext(this); 注册一些mbean

=========总结===========
	1）、Spring容器在启动的时候，先会保存所有注册进来的Bean的定义信息；
		1）、xml注册bean；<bean>
		2）、注解注册Bean；@Service、@Component、@Bean、xxx
	2）、Spring容器会合适的时机创建这些Bean
		1）、用到这个bean的时候；利用getBean创建bean；创建好以后保存在容器中；
		2）、统一创建剩下所有的bean的时候；finishBeanFactoryInitialization()；
	3）、后置处理器；BeanPostProcessor
		1）、每一个bean创建完成，都会使用各种后置处理器进行处理；来增强bean的功能；
			AutowiredAnnotationBeanPostProcessor:处理自动注入
			AnnotationAwareAspectJAutoProxyCreator:来做AOP功能；
			xxx....
			增强的功能注解：
			AsyncAnnotationBeanPostProcessor
			....
	4）、事件驱动模型；
		ApplicationListener；事件监听；
		ApplicationEventMulticaster；事件派发：
























